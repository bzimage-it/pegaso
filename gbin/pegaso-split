#!/usr/bin/perl 

use strict;
use warnings;
use File::Basename;

$SIG{__DIE__} = sub {
	my $msg=shift;
	# my ($package, $filename, $line) = caller;
	my $filename = basename($0);
	print STDERR <<EOF;
	
  $filename regex-cut|rc    <input-separator-regex> [[<output-separator-string>] [pos1 [pos2 ...]]
            print columns of a given positions.
  $filename regex-printf|rp <input-separator-regex> <printf-format> [pos1 [pos2 ...]]
            print columns with a specific format like printf which positional arguments
            are given by pos1, pos2 ... ; if no posN is given.
  $filename regex-list|rl   <output-separator-string> <regex1> [<regex2> ...]
            print sequence of regex that matches input line; note that regex<N> is
            searched after the end of match of regex<N-1>.
  $filename cat|c           [ <any> ... ]
            simply write back all standard input, used for fake usage or test cases; 
            all remaining parameters will be ignored.
  $filename examples|ex     [ <any> ... ]
            print some usage examples; all remaining parameters will be ignored. 
            
  <input-separator-regex>   : perl regex for input column separator; see 'man perlre(5)'
  <output-separator-string> : string for output columns separator; default space ' '
  <printf-format>           : printf format specificaiton with special tags %1, %2 ... inside
                              substituted with column 1, 2 ... ; other %X are compliant to
                              perl 'printf' format. see 'man perlfunc(5)'
  pos1 pos2 ...             : integer position of columns number to print out; starts from 1
                              negative numbers indicates last colums: -1 last, -2 second-last ...
                              if no positions are given, all columns are printed out.
  <regex1> ...              : list of regular expression to match
                              
  Error: $msg
EOF
	exit(1);
};

die "no command given" if(@ARGV == 0);
my $mode = shift;

my $DEBUG = 0;

my $mode_cat = 1;
my $mode_regex_printf=2;
my $mode_regex_cut = 3;
my $mode_examples = 4;
my $mode_regex_list = 5;

my $mode2int = {
	'regex-cut'    => $mode_regex_cut,
	'rc'           => $mode_regex_cut,
	'regex-printf' => $mode_regex_printf,
	'rp'           => $mode_regex_printf,
	'regex-list'   => $mode_regex_list,
	'rl'           => $mode_regex_list,
	'cat'          => $mode_cat,
	'c'            => $mode_cat,
	'examples'     => $mode_examples,
	'ex'           => $mode_examples,
};

unless(exists($mode2int->{$mode})) { 
	die "invalid mode param";
}
my $modeint = $mode2int->{$mode};

if($modeint == $mode_regex_cut or $modeint == $mode_regex_printf) {
	die "missed params" if (scalar(@ARGV) == 0);
	my $regex = shift;
	my $newsep ;
	if($modeint == $mode_regex_cut) {
		$newsep = shift || " ";
	}
	my $format ;
	if($modeint == $mode_regex_printf) {
		die "missed params" if (scalar(@ARGV) == 0);
		$format = shift;
	}
	# remaining arguments:
	my @pos = @ARGV;
	if ( grep { $_ eq '0' } @pos ) {
		die "0 is not a valid position for posN param";
	}
	# get input:
	while(<STDIN>) {
		chomp;
		# split input by given regex:
		my @parts = split(/$regex/);
		# if no position are given at command line, print all columns, otherwice use those ones.
		my $idx = scalar(@pos) == 0 ? [1..scalar(@parts)] : \@pos;
		# now $idx contains all indices to really use. perl's array indexing criteria do the rest. 
		# note that the expression "$_<0 ? $_ : $_-1" makes both positive and negative values
		# to work as expected.
		my @values = map { $parts[$_<0 ? $_ : $_-1] } @{$idx} ;
		if($modeint == $mode_regex_cut) {
			print STDOUT join($newsep, @values)."\n";
		}elsif($modeint == $mode_regex_printf) {
			printf(STDOUT $format."\n",@values);
		}else{
			die "internal error modeint 1: $modeint";
		}
		
	}
}elsif ( $modeint  eq $mode_regex_list) {
	die "missed params" if (scalar(@ARGV) == 0);
	my $osep = shift;
	die "missed params" if (scalar(@ARGV) == 0);
	while(<STDIN>) {
		chomp;
		my @out=();
		my @regex=@ARGV;
		my $exit = 0;
		my $r;
		while ( ($exit == 0) && ($r = shift (@regex) )) {
			print STDERR "FIND: $r " if($DEBUG);
			if(m/($r)/) {
				push(@out,$1);
				# note that ? avoids greedy matching of the pattern in regex:
				s/^.*?($r)//;
				print STDERR " @out|residual: $_" if($DEBUG);
			}else{
				$exit = 1;
				print STDERR " [exit] " if($DEBUG);
			}
			print STDERR "\n" if($DEBUG);
		}
		print join($osep,@out)."\n";
	}
}elsif ( $modeint  eq $mode_cat) {
	while(<STDIN>) {
		print STDOUT;
	}
}elsif ( $modeint eq $mode_examples ) {
	print STDERR <<EOF;
	
suppose file.txt is:

Banana,6,1.50,fruit  sweet
Bread,1,2.50,bakery    salty
Lemon,3,1.44,fruit tart
Pasta,4,0.99,pasta  neutral

~\$ cat file.txt| pegaso-split regex-cut '[\\s,]+' '|'
Banana|6|1.50|fruit|sweet
Bread|1|2.50|bakery|salty
Lemon|3|1.44|fruit|tart
Pasta|4|0.99|pasta|neutral

~\$ cat file.txt| pegaso-split regex-cut '[\\s,]+' '|' 1 -1
Banana|sweet
Bread|salty
Lemon|tart
Pasta|neutral

~\$ cat file.txt| pegaso-split regex-printf '[\\s,]+' "%-7s %10.2f" 1 -3
Banana        1.50
Bread         2.50
Lemon         1.44
Pasta         0.99

~\$ cat file.txt| pegaso-split cat '[\\s,]+' "%-7s %10.2f" 
Banana,6,1.50,fruit  sweet
Bread,1,2.50,bakery    salty
Lemon,3,1.44,fruit tart
Pasta,4,0.99,pasta  neutral

~\$ echo "hello guy, how are u?" | pegaso-split rl ' / ' '\\w+' 'g\\w+' '[^\\s]+ow.*\\?'
hello / guy / how are u?

EOF

}else{
	die "internal error modeint 2: $modeint";
}


